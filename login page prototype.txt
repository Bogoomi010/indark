import React, { useEffect, useMemo, useRef, useState } from "react";

/**
 * DarkLabyrinthLogin — centered login/signup with Google OAuth handoff
 * - Login card centered
 * - Google 로그인 버튼 (로그인/회원가입 모두)
 * - 회원가입: 이메일/닉네임/비밀번호/비밀번호 확인 (불일치 시 진행 불가)
 * - Google 인증 완료 후 닉네임 입력 단계로 전환
 */

// ===== Types =====
export type LoginPayload =
  | { type: "password"; email: string; password: string }
  | { type: "signup"; email: string; nickname: string; password: string }
  | { type: "oauth"; provider: "google" | "github" }
  | { type: "oauth_nickname"; provider: "google" | "github"; nickname: string; email?: string };

interface Props {
  onLogin?: (payload: LoginPayload) => Promise<void> | void;
  logoText?: string;
  /** 서버 사이드 OAuth 시작 주소. 제공 시 해당 경로로 이동 */
  oauthGoogleUrl?: string; // e.g. "/api/auth/google"
}

export default function DarkLabyrinthLogin({ onLogin, logoText = "IN DARK", oauthGoogleUrl }: Props) {
  const rootRef = useRef<HTMLDivElement | null>(null);

  const [mode, setMode] = useState<"signin" | "signup" | "oauthNickname">("signin");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // common fields
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  // signup fields
  const [nickname, setNickname] = useState("");
  const [passwordConfirm, setPasswordConfirm] = useState("");

  // oauth return
  const [oauthEmail, setOauthEmail] = useState<string>("");

  const subtitle = useMemo(
    () => (mode === "signin" ? "미궁의 문이 열립니다" : mode === "signup" ? "서약을 기록하고 입장하세요" : "닉네임을 정하고 입장하세요"),
    [mode]
  );

  // OAuth 리다이렉트 복귀 처리: ?oauth=google&ok=1&email=...
  useEffect(() => {
    try {
      const sp = new URLSearchParams(window.location.search);
      if (sp.get("oauth") === "google" && sp.get("ok") === "1") {
        const em = sp.get("email") || "";
        if (em) {
          setOauthEmail(em);
          setEmail(em);
        }
        setMode("oauthNickname");
      }
    } catch { /* noop */ }
  }, []);

  // ===== Handlers =====
  async function handleSignIn(e: React.FormEvent) {
    e.preventDefault();
    setError(null);
    setLoading(true);
    try {
      await onLogin?.({ type: "password", email, password });
    } catch (err: any) {
      setError(err?.message ?? "로그인에 실패했습니다.");
    } finally {
      setLoading(false);
    }
  }

  async function handleSignUp(e: React.FormEvent) {
    e.preventDefault();
    if (!email) return setError("이메일을 입력하세요");
    if (!nickname.trim()) return setError("닉네임을 입력하세요");
    if (password.length < 8) return setError("비밀번호는 8자 이상 권장");
    if (password !== passwordConfirm) return setError("비밀번호가 일치하지 않습니다");
    setError(null);
    setLoading(true);
    try {
      await onLogin?.({ type: "signup", email, nickname: nickname.trim(), password });
    } catch (err: any) {
      setError(err?.message ?? "회원가입에 실패했습니다.");
    } finally {
      setLoading(false);
    }
  }

  async function signInWithGoogle() {
    setError(null);
    setLoading(true);
    try {
      if (oauthGoogleUrl) {
        window.location.href = oauthGoogleUrl; // 서버 사이드 OAuth 시작
        return;
      }
      // 클라이언트에서 처리한다면 상위에 위임
      await onLogin?.({ type: "oauth", provider: "google" });
      setMode("oauthNickname");
    } catch (e: any) {
      setError(e?.message ?? "구글 로그인 실패");
    } finally {
      setLoading(false);
    }
  }

  async function submitOauthNickname(e: React.FormEvent) {
    e.preventDefault();
    if (!nickname.trim()) return setError("닉네임을 입력하세요");
    setError(null);
    setLoading(true);
    try {
      await onLogin?.({ type: "oauth_nickname", provider: "google", nickname: nickname.trim(), email: email || oauthEmail });
    } catch (err: any) {
      setError(err?.message ?? "닉네임 설정 실패");
    } finally {
      setLoading(false);
    }
  }

  return (
    <div
      ref={rootRef}
      className="relative min-h-screen w-full overflow-hidden bg-black text-gray-200"
      style={{
        backgroundImage: "url('/img_loginbackground.png')",
        backgroundSize: "cover",
        backgroundPosition: "center",
      }}
    >
      <div className="relative z-10 grid min-h-screen grid-rows-[auto_1fr_auto]">
        {/* Header */}
        <header className="flex items-center justify-between p-6">
          <div className="text-2xl tracking-[0.4em] font-semibold text-gray-100">{logoText}</div>
          <div className="text-xs text-gray-400">ALPHA BUILD</div>
        </header>

        {/* Center card — single column, perfectly centered */}
        <main className="mx-auto flex w-full flex-1 items-center justify-center px-4">
          <div className="w-full max-w-[420px] rounded-2xl border border-white/10 bg-black/70 p-6 shadow-xl backdrop-blur">
            {/* Tabs (OAuth 닉네임 단계에서는 숨김) */}
            {(mode === "signin" || mode === "signup") && (
              <div className="mb-6 flex items-center justify-center gap-4">
                <button onClick={() => setMode("signin")} className={`text-sm ${mode === "signin" ? "text-amber-300" : "text-gray-400 hover:text-gray-200"}`}>로그인</button>
                <span className="text-gray-600">/</span>
                <button onClick={() => setMode("signup")} className={`text-sm ${mode === "signup" ? "text-amber-300" : "text-gray-400 hover:text-gray-200"}`}>회원가입</button>
              </div>
            )}

            <h1 className="mb-2 text-2xl font-semibold text-gray-100 text-center">{subtitle}</h1>

            {/* ===== FORMS ===== */}
            {mode === "oauthNickname" ? (
              <form onSubmit={submitOauthNickname} className="space-y-4">
                <p className="text-center text-sm text-gray-400">Google 인증이 완료되었습니다. 닉네임을 정하면 입장할 수 있어요.</p>
                <div>
                  <label htmlFor="nickname_oauth" className="mb-1 block text-sm text-gray-300">닉네임</label>
                  <input
                    id="nickname_oauth"
                    type="text"
                    required
                    value={nickname}
                    onChange={(e) => setNickname(e.target.value)}
                    className="w-full rounded-lg border border-white/10 bg-black/50 px-3 py-2 text-gray-100 focus:border-amber-400/60"
                    placeholder="던전 탐험가"
                  />
                </div>
                {error && (<div role="alert" className="rounded-md border border-red-500/40 bg-red-900/20 px-3 py-2 text-sm text-red-200">{error}</div>)}
                <button type="submit" disabled={loading} className="w-full rounded-lg bg-amber-600 px-4 py-2 text-black hover:bg-amber-500 disabled:opacity-50">닉네임 설정</button>
              </form>
            ) : mode === "signin" ? (
              <form onSubmit={handleSignIn} className="space-y-4">
                <div>
                  <label htmlFor="email" className="mb-1 block text-sm text-gray-300">이메일</label>
                  <input id="email" type="email" required value={email} onChange={(e) => setEmail(e.target.value)} className="w-full rounded-lg border border-white/10 bg-black/50 px-3 py-2 text-gray-100 focus:border-amber-400/60" placeholder="you@dark.example" />
                </div>
                <div>
                  <label htmlFor="password" className="mb-1 block text-sm text-gray-300">비밀번호</label>
                  <input id="password" type="password" required value={password} onChange={(e) => setPassword(e.target.value)} className="w-full rounded-lg border border-white/10 bg-black/50 px-3 py-2 text-gray-100 focus:border-amber-400/60" placeholder="••••••••" />
                </div>
                {error && (<div role="alert" className="rounded-md border border-red-500/40 bg-red-900/20 px-3 py-2 text-sm text-red-200">{error}</div>)}
                <button type="submit" disabled={loading} className="w-full rounded-lg bg-amber-600 px-4 py-2 text-black hover:bg-amber-500 disabled:opacity-50">문 열기</button>

                {/* Divider */}
                <div className="flex items-center gap-2 text-xs text-gray-500">
                  <div className="h-px flex-1 bg-white/10" />
                  <span>또는</span>
                  <div className="h-px flex-1 bg-white/10" />
                </div>
                <button type="button" onClick={signInWithGoogle} disabled={loading} className="w-full rounded-lg border border-white/10 bg-black/60 px-4 py-2 text-sm text-gray-100 hover:border-amber-400/40 disabled:opacity-50">Google로 계속하기</button>
              </form>
            ) : (
              <form onSubmit={handleSignUp} className="space-y-4">
                <div>
                  <label htmlFor="email_su" className="mb-1 block text-sm text-gray-300">이메일</label>
                  <input id="email_su" type="email" required value={email} onChange={(e) => setEmail(e.target.value)} className="w-full rounded-lg border border-white/10 bg-black/50 px-3 py-2 text-gray-100 focus:border-amber-400/60" placeholder="you@dark.example" />
                </div>
                <div>
                  <label htmlFor="nickname_su" className="mb-1 block text-sm text-gray-300">닉네임</label>
                  <input id="nickname_su" type="text" required value={nickname} onChange={(e) => setNickname(e.target.value)} className="w-full rounded-lg border border-white/10 bg-black/50 px-3 py-2 text-gray-100 focus:border-amber-400/60" placeholder="던전 탐험가" />
                </div>
                <div>
                  <label htmlFor="password_su" className="mb-1 block text-sm text-gray-300">비밀번호</label>
                  <input id="password_su" type="password" required value={password} onChange={(e) => setPassword(e.target.value)} className="w-full rounded-lg border border-white/10 bg-black/50 px-3 py-2 text-gray-100 focus:border-amber-400/60" placeholder="••••••••" />
                </div>
                <div>
                  <label htmlFor="passwordConfirm_su" className="mb-1 block text-sm text-gray-300">비밀번호 다시 입력</label>
                  <input id="passwordConfirm_su" type="password" required value={passwordConfirm} onChange={(e) => setPasswordConfirm(e.target.value)} className="w-full rounded-lg border border-white/10 bg-black/50 px-3 py-2 text-gray-100 focus:border-amber-400/60" placeholder="••••••••" />
                </div>
                {password && passwordConfirm && password !== passwordConfirm && (
                  <div role="alert" className="rounded-md border border-red-500/40 bg-red-900/20 px-3 py-2 text-sm text-red-200">비밀번호가 일치하지 않습니다</div>
                )}
                {error && (<div role="alert" className="rounded-md border border-red-500/40 bg-red-900/20 px-3 py-2 text-sm text-red-200">{error}</div>)}
                <button type="submit" disabled={loading || password !== passwordConfirm} className="w-full rounded-lg bg-amber-600 px-4 py-2 text-black hover:bg-amber-500 disabled:opacity-50">서약하기</button>

                {/* Divider */}
                <div className="flex items-center gap-2 text-xs text-gray-500">
                  <div className="h-px flex-1 bg-white/10" />
                  <span>또는</span>
                  <div className="h-px flex-1 bg-white/10" />
                </div>
                {/* 회원가입에도 Google 버튼 배치 */}
                <button type="button" onClick={signInWithGoogle} disabled={loading} className="w-full rounded-lg border border-white/10 bg-black/60 px-4 py-2 text-sm text-gray-100 hover:border-amber-400/40 disabled:opacity-50">Google로 계속하기</button>
              </form>
            )}
          </div>
        </main>

        {/* Footer */}
        <footer className="flex items-center justify-between p-6 text-xs text-gray-500">
          <span>© {new Date().getFullYear()} IN DARK</span>
          <nav className="flex gap-4">
            <a className="hover:text-gray-300" href="#">약관</a>
            <a className="hover:text-gray-300" href="#">개인정보</a>
            <a className="hover:text-gray-300" href="#">지원</a>
          </nav>
        </footer>
      </div>
    </div>
  );
}
